/**
 * backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/Article', 'model/Client', 'model/EditorRole', 'model/Feed', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/Publisher', 'model/Subscribtion', 'model/User', 'model/Version', 'api/ArticleApi', 'api/ClientApi', 'api/EditorRoleApi', 'api/FeedApi', 'api/PublisherApi', 'api/SubscribtionApi', 'api/UserApi', 'api/VersionApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AccessToken'), require('./model/Article'), require('./model/Client'), require('./model/EditorRole'), require('./model/Feed'), require('./model/InlineResponse200'), require('./model/InlineResponse2001'), require('./model/InlineResponse2002'), require('./model/Publisher'), require('./model/Subscribtion'), require('./model/User'), require('./model/Version'), require('./api/ArticleApi'), require('./api/ClientApi'), require('./api/EditorRoleApi'), require('./api/FeedApi'), require('./api/PublisherApi'), require('./api/SubscribtionApi'), require('./api/UserApi'), require('./api/VersionApi'));
  }
}(function(ApiClient, AccessToken, Article, Client, EditorRole, Feed, InlineResponse200, InlineResponse2001, InlineResponse2002, Publisher, Subscribtion, User, Version, ArticleApi, ClientApi, EditorRoleApi, FeedApi, PublisherApi, SubscribtionApi, UserApi, VersionApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Backend = require('index'); // See note below*.
   * var xxxSvc = new Backend.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Backend.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Backend.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Backend.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AccessToken model constructor.
     * @property {module:model/AccessToken}
     */
    AccessToken: AccessToken,
    /**
     * The Article model constructor.
     * @property {module:model/Article}
     */
    Article: Article,
    /**
     * The Client model constructor.
     * @property {module:model/Client}
     */
    Client: Client,
    /**
     * The EditorRole model constructor.
     * @property {module:model/EditorRole}
     */
    EditorRole: EditorRole,
    /**
     * The Feed model constructor.
     * @property {module:model/Feed}
     */
    Feed: Feed,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The InlineResponse2002 model constructor.
     * @property {module:model/InlineResponse2002}
     */
    InlineResponse2002: InlineResponse2002,
    /**
     * The Publisher model constructor.
     * @property {module:model/Publisher}
     */
    Publisher: Publisher,
    /**
     * The Subscribtion model constructor.
     * @property {module:model/Subscribtion}
     */
    Subscribtion: Subscribtion,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version: Version,
    /**
     * The ArticleApi service constructor.
     * @property {module:api/ArticleApi}
     */
    ArticleApi: ArticleApi,
    /**
     * The ClientApi service constructor.
     * @property {module:api/ClientApi}
     */
    ClientApi: ClientApi,
    /**
     * The EditorRoleApi service constructor.
     * @property {module:api/EditorRoleApi}
     */
    EditorRoleApi: EditorRoleApi,
    /**
     * The FeedApi service constructor.
     * @property {module:api/FeedApi}
     */
    FeedApi: FeedApi,
    /**
     * The PublisherApi service constructor.
     * @property {module:api/PublisherApi}
     */
    PublisherApi: PublisherApi,
    /**
     * The SubscribtionApi service constructor.
     * @property {module:api/SubscribtionApi}
     */
    SubscribtionApi: SubscribtionApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi,
    /**
     * The VersionApi service constructor.
     * @property {module:api/VersionApi}
     */
    VersionApi: VersionApi
  };

  return exports;
}));
