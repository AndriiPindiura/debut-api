/**
 * backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Article', 'model/Client', 'model/EditorRole', 'model/Feed', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/Publisher', 'model/Subscribtion'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Article'), require('../model/Client'), require('../model/EditorRole'), require('../model/Feed'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/Publisher'), require('../model/Subscribtion'));
  } else {
    // Browser globals (root is window)
    if (!root.Backend) {
      root.Backend = {};
    }
    root.Backend.FeedApi = factory(root.Backend.ApiClient, root.Backend.Article, root.Backend.Client, root.Backend.EditorRole, root.Backend.Feed, root.Backend.InlineResponse200, root.Backend.InlineResponse2001, root.Backend.InlineResponse2002, root.Backend.Publisher, root.Backend.Subscribtion);
  }
}(this, function(ApiClient, Article, Client, EditorRole, Feed, InlineResponse200, InlineResponse2001, InlineResponse2002, Publisher, Subscribtion) {
  'use strict';

  /**
   * Feed service.
   * @module api/FeedApi
   * @version 0.1.0
   */

  /**
   * Constructs a new FeedApi. 
   * @alias module:api/FeedApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the feedCount operation.
     * @callback module:api/FeedApi~feedCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count instances of the model matched by where from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/FeedApi~feedCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.feedCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Feeds/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedCreate operation.
     * @callback module:api/FeedApi~feedCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance of the model and persist it into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedCreateChangeStreamGetFeedsChangeStream operation.
     * @callback module:api/FeedApi~feedCreateChangeStreamGetFeedsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/FeedApi~feedCreateChangeStreamGetFeedsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.feedCreateChangeStreamGetFeedsChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'options': opts['options']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Feeds/change-stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedCreateChangeStreamPostFeedsChangeStream operation.
     * @callback module:api/FeedApi~feedCreateChangeStreamPostFeedsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/FeedApi~feedCreateChangeStreamPostFeedsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.feedCreateChangeStreamPostFeedsChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'options': opts['options']
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Feeds/change-stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedDeleteById operation.
     * @callback module:api/FeedApi~feedDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {module:api/FeedApi~feedDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.feedDeleteById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedDeleteById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Feeds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedExistsGetFeedsidExists operation.
     * @callback module:api/FeedApi~feedExistsGetFeedsidExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/FeedApi~feedExistsGetFeedsidExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.feedExistsGetFeedsidExists = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedExistsGetFeedsidExists");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Feeds/{id}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedExistsHeadFeedsid operation.
     * @callback module:api/FeedApi~feedExistsHeadFeedsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/FeedApi~feedExistsHeadFeedsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.feedExistsHeadFeedsid = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedExistsHeadFeedsid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Feeds/{id}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedFind operation.
     * @callback module:api/FeedApi~feedFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all instances of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/FeedApi~feedFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    this.feedFind = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Feed];

      return this.apiClient.callApi(
        '/Feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedFindById operation.
     * @callback module:api/FeedApi~feedFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/FeedApi~feedFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedFindById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedFindById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedFindOne operation.
     * @callback module:api/FeedApi~feedFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first instance of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/FeedApi~feedFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedFindOne = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/findOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPatchOrCreate operation.
     * @callback module:api/FeedApi~feedPatchOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedPatchOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedPatchOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCountArticles operation.
     * @callback module:api/FeedApi~feedPrototypeCountArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts articles of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/FeedApi~feedPrototypeCountArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.feedPrototypeCountArticles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCountArticles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCountEditors operation.
     * @callback module:api/FeedApi~feedPrototypeCountEditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts editors of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/FeedApi~feedPrototypeCountEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.feedPrototypeCountEditors = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCountEditors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCountSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeCountSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts subscribers of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/FeedApi~feedPrototypeCountSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.feedPrototypeCountSubscribers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCountSubscribers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCreateArticles operation.
     * @callback module:api/FeedApi~feedPrototypeCreateArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in articles of this model.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {module:model/Article} opts.data 
     * @param {module:api/FeedApi~feedPrototypeCreateArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    this.feedPrototypeCreateArticles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCreateArticles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Article;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCreateEditors operation.
     * @callback module:api/FeedApi~feedPrototypeCreateEditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in editors of this model.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data 
     * @param {module:api/FeedApi~feedPrototypeCreateEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeCreateEditors = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCreateEditors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeCreateSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeCreateSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in subscribers of this model.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data 
     * @param {module:api/FeedApi~feedPrototypeCreateSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeCreateSubscribers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeCreateSubscribers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDeleteArticles operation.
     * @callback module:api/FeedApi~feedPrototypeDeleteArticlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all articles of this model.
     * @param {String} id Feed id
     * @param {module:api/FeedApi~feedPrototypeDeleteArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDeleteArticles = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDeleteArticles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDeleteEditors operation.
     * @callback module:api/FeedApi~feedPrototypeDeleteEditorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all editors of this model.
     * @param {String} id Feed id
     * @param {module:api/FeedApi~feedPrototypeDeleteEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDeleteEditors = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDeleteEditors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDeleteSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeDeleteSubscribersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all subscribers of this model.
     * @param {String} id Feed id
     * @param {module:api/FeedApi~feedPrototypeDeleteSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDeleteSubscribers = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDeleteSubscribers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDestroyByIdArticles operation.
     * @callback module:api/FeedApi~feedPrototypeDestroyByIdArticlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for articles.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for articles
     * @param {module:api/FeedApi~feedPrototypeDestroyByIdArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDestroyByIdArticles = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDestroyByIdArticles");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeDestroyByIdArticles");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDestroyByIdEditors operation.
     * @callback module:api/FeedApi~feedPrototypeDestroyByIdEditorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for editors.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {module:api/FeedApi~feedPrototypeDestroyByIdEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDestroyByIdEditors = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDestroyByIdEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeDestroyByIdEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeDestroyByIdSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeDestroyByIdSubscribersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for subscribers.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {module:api/FeedApi~feedPrototypeDestroyByIdSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeDestroyByIdSubscribers = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeDestroyByIdSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeDestroyByIdSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeExistsEditors operation.
     * @callback module:api/FeedApi~feedPrototypeExistsEditorsCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the existence of editors relation to an item by id.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {module:api/FeedApi~feedPrototypeExistsEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.feedPrototypeExistsEditors = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeExistsEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeExistsEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/rel/{fk}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeExistsSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeExistsSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the existence of subscribers relation to an item by id.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {module:api/FeedApi~feedPrototypeExistsSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.feedPrototypeExistsSubscribers = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeExistsSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeExistsSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/rel/{fk}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeFindByIdArticles operation.
     * @callback module:api/FeedApi~feedPrototypeFindByIdArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for articles.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for articles
     * @param {module:api/FeedApi~feedPrototypeFindByIdArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    this.feedPrototypeFindByIdArticles = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeFindByIdArticles");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeFindByIdArticles");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Article;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeFindByIdEditors operation.
     * @callback module:api/FeedApi~feedPrototypeFindByIdEditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for editors.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {module:api/FeedApi~feedPrototypeFindByIdEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeFindByIdEditors = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeFindByIdEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeFindByIdEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeFindByIdSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeFindByIdSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for subscribers.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {module:api/FeedApi~feedPrototypeFindByIdSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeFindByIdSubscribers = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeFindByIdSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeFindByIdSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeGetArticles operation.
     * @callback module:api/FeedApi~feedPrototypeGetArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries articles of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/FeedApi~feedPrototypeGetArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    this.feedPrototypeGetArticles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeGetArticles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Article];

      return this.apiClient.callApi(
        '/Feeds/{id}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeGetEditors operation.
     * @callback module:api/FeedApi~feedPrototypeGetEditorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Client>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries editors of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/FeedApi~feedPrototypeGetEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Client>}
     */
    this.feedPrototypeGetEditors = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeGetEditors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Client];

      return this.apiClient.callApi(
        '/Feeds/{id}/editors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeGetPublisher operation.
     * @callback module:api/FeedApi~feedPrototypeGetPublisherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches belongsTo relation publisher.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.refresh 
     * @param {module:api/FeedApi~feedPrototypeGetPublisherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.feedPrototypeGetPublisher = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeGetPublisher");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'refresh': opts['refresh']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Feeds/{id}/publisher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeGetSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeGetSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Client>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries subscribers of Feed.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/FeedApi~feedPrototypeGetSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Client>}
     */
    this.feedPrototypeGetSubscribers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeGetSubscribers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Client];

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeLinkEditors operation.
     * @callback module:api/FeedApi~feedPrototypeLinkEditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a related item by id for editors.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {Object} opts Optional parameters
     * @param {module:model/EditorRole} opts.data 
     * @param {module:api/FeedApi~feedPrototypeLinkEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorRole}
     */
    this.feedPrototypeLinkEditors = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeLinkEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeLinkEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = EditorRole;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/rel/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeLinkSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeLinkSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscribtion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a related item by id for subscribers.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {Object} opts Optional parameters
     * @param {module:model/Subscribtion} opts.data 
     * @param {module:api/FeedApi~feedPrototypeLinkSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscribtion}
     */
    this.feedPrototypeLinkSubscribers = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeLinkSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeLinkSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Subscribtion;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/rel/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypePatchAttributes operation.
     * @callback module:api/FeedApi~feedPrototypePatchAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @param {String} id Feed id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data An object of model property name/value pairs
     * @param {module:api/FeedApi~feedPrototypePatchAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedPrototypePatchAttributes = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypePatchAttributes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeUnlinkEditors operation.
     * @callback module:api/FeedApi~feedPrototypeUnlinkEditorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the editors relation to an item by id.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {module:api/FeedApi~feedPrototypeUnlinkEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeUnlinkEditors = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeUnlinkEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeUnlinkEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/rel/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeUnlinkSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeUnlinkSubscribersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the subscribers relation to an item by id.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {module:api/FeedApi~feedPrototypeUnlinkSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.feedPrototypeUnlinkSubscribers = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeUnlinkSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeUnlinkSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/rel/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeUpdateByIdArticles operation.
     * @callback module:api/FeedApi~feedPrototypeUpdateByIdArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for articles.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for articles
     * @param {Object} opts Optional parameters
     * @param {module:model/Article} opts.data 
     * @param {module:api/FeedApi~feedPrototypeUpdateByIdArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    this.feedPrototypeUpdateByIdArticles = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeUpdateByIdArticles");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeUpdateByIdArticles");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Article;

      return this.apiClient.callApi(
        '/Feeds/{id}/articles/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeUpdateByIdEditors operation.
     * @callback module:api/FeedApi~feedPrototypeUpdateByIdEditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for editors.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for editors
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data 
     * @param {module:api/FeedApi~feedPrototypeUpdateByIdEditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeUpdateByIdEditors = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeUpdateByIdEditors");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeUpdateByIdEditors");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/editors/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedPrototypeUpdateByIdSubscribers operation.
     * @callback module:api/FeedApi~feedPrototypeUpdateByIdSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for subscribers.
     * @param {String} id Feed id
     * @param {String} fk Foreign key for subscribers
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data 
     * @param {module:api/FeedApi~feedPrototypeUpdateByIdSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.feedPrototypeUpdateByIdSubscribers = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedPrototypeUpdateByIdSubscribers");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling feedPrototypeUpdateByIdSubscribers");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Feeds/{id}/subscribers/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedReplaceByIdPostFeedsidReplace operation.
     * @callback module:api/FeedApi~feedReplaceByIdPostFeedsidReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedReplaceByIdPostFeedsidReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedReplaceByIdPostFeedsidReplace = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedReplaceByIdPostFeedsidReplace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/{id}/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedReplaceByIdPutFeedsid operation.
     * @callback module:api/FeedApi~feedReplaceByIdPutFeedsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedReplaceByIdPutFeedsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedReplaceByIdPutFeedsid = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling feedReplaceByIdPutFeedsid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedReplaceOrCreatePostFeedsReplaceOrCreate operation.
     * @callback module:api/FeedApi~feedReplaceOrCreatePostFeedsReplaceOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedReplaceOrCreatePostFeedsReplaceOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedReplaceOrCreatePostFeedsReplaceOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/replaceOrCreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedReplaceOrCreatePutFeeds operation.
     * @callback module:api/FeedApi~feedReplaceOrCreatePutFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data Model instance data
     * @param {module:api/FeedApi~feedReplaceOrCreatePutFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedReplaceOrCreatePutFeeds = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedUpdateAll operation.
     * @callback module:api/FeedApi~feedUpdateAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Feed} opts.data An object of model property name/value pairs
     * @param {module:api/FeedApi~feedUpdateAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.feedUpdateAll = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/Feeds/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedUpsertWithWhere operation.
     * @callback module:api/FeedApi~feedUpsertWithWhereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Feed} opts.data An object of model property name/value pairs
     * @param {module:api/FeedApi~feedUpsertWithWhereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.feedUpsertWithWhere = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Feeds/upsertWithWhere', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
