/**
 * backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/Client', 'model/EditorRole', 'model/Feed', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/Subscribtion'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessToken'), require('../model/Client'), require('../model/EditorRole'), require('../model/Feed'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/Subscribtion'));
  } else {
    // Browser globals (root is window)
    if (!root.Backend) {
      root.Backend = {};
    }
    root.Backend.ClientApi = factory(root.Backend.ApiClient, root.Backend.AccessToken, root.Backend.Client, root.Backend.EditorRole, root.Backend.Feed, root.Backend.InlineResponse200, root.Backend.InlineResponse2001, root.Backend.InlineResponse2002, root.Backend.Subscribtion);
  }
}(this, function(ApiClient, AccessToken, Client, EditorRole, Feed, InlineResponse200, InlineResponse2001, InlineResponse2002, Subscribtion) {
  'use strict';

  /**
   * Client service.
   * @module api/ClientApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ClientApi. 
   * @alias module:api/ClientApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the clientChangePassword operation.
     * @callback module:api/ClientApi~clientChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a user&#39;s password.
     * @param {String} oldPassword 
     * @param {String} newPassword 
     * @param {module:api/ClientApi~clientChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientChangePassword = function(oldPassword, newPassword, callback) {
      var postBody = null;

      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling clientChangePassword");
      }

      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling clientChangePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'oldPassword': oldPassword,
        'newPassword': newPassword
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientConfirm operation.
     * @callback module:api/ClientApi~clientConfirmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm a user registration with identity verification token.
     * @param {String} uid 
     * @param {String} token 
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirect 
     * @param {module:api/ClientApi~clientConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientConfirm = function(uid, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling clientConfirm");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientConfirm");
      }


      var pathParams = {
      };
      var queryParams = {
        'uid': uid,
        'token': token,
        'redirect': opts['redirect']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/confirm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCount operation.
     * @callback module:api/ClientApi~clientCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count instances of the model matched by where from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/ClientApi~clientCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.clientCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Clients/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreate operation.
     * @callback module:api/ClientApi~clientCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance of the model and persist it into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreateChangeStreamGetClientsChangeStream operation.
     * @callback module:api/ClientApi~clientCreateChangeStreamGetClientsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/ClientApi~clientCreateChangeStreamGetClientsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.clientCreateChangeStreamGetClientsChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'options': opts['options']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Clients/change-stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreateChangeStreamPostClientsChangeStream operation.
     * @callback module:api/ClientApi~clientCreateChangeStreamPostClientsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/ClientApi~clientCreateChangeStreamPostClientsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.clientCreateChangeStreamPostClientsChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'options': opts['options']
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Clients/change-stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDeleteById operation.
     * @callback module:api/ClientApi~clientDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {module:api/ClientApi~clientDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.clientDeleteById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientDeleteById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Clients/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientExistsGetClientsidExists operation.
     * @callback module:api/ClientApi~clientExistsGetClientsidExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/ClientApi~clientExistsGetClientsidExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.clientExistsGetClientsidExists = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientExistsGetClientsidExists");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Clients/{id}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientExistsHeadClientsid operation.
     * @callback module:api/ClientApi~clientExistsHeadClientsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/ClientApi~clientExistsHeadClientsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.clientExistsHeadClientsid = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientExistsHeadClientsid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Clients/{id}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientFind operation.
     * @callback module:api/ClientApi~clientFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Client>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all instances of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/ClientApi~clientFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Client>}
     */
    this.clientFind = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Client];

      return this.apiClient.callApi(
        '/Clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientFindById operation.
     * @callback module:api/ClientApi~clientFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/ClientApi~clientFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientFindById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientFindById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientFindOne operation.
     * @callback module:api/ClientApi~clientFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first instance of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/ClientApi~clientFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientFindOne = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/findOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientLogin operation.
     * @callback module:api/ClientApi~clientLoginCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login a user with username/email and password.
     * @param {Object} credentials 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Related objects to include in the response. See the description of return value for more details.
     * @param {module:api/ClientApi~clientLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.clientLogin = function(credentials, opts, callback) {
      opts = opts || {};
      var postBody = credentials;

      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling clientLogin");
      }


      var pathParams = {
      };
      var queryParams = {
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Clients/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientLogout operation.
     * @callback module:api/ClientApi~clientLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout a user with access token.
     * @param {module:api/ClientApi~clientLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientLogout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPatchOrCreate operation.
     * @callback module:api/ClientApi~clientPatchOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientPatchOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientPatchOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCountAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeCountAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts accessTokens of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/ClientApi~clientPrototypeCountAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.clientPrototypeCountAccessTokens = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCountAccessTokens");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCountEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeCountEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts editorFeeds of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/ClientApi~clientPrototypeCountEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.clientPrototypeCountEditorFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCountEditorFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCountSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeCountSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts subscribtions of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/ClientApi~clientPrototypeCountSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.clientPrototypeCountSubscribtions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCountSubscribtions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCreateAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeCreateAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in accessTokens of this model.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessToken} opts.data 
     * @param {module:api/ClientApi~clientPrototypeCreateAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.clientPrototypeCreateAccessTokens = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCreateAccessTokens");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCreateEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeCreateEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in editorFeeds of this model.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/ClientApi~clientPrototypeCreateEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeCreateEditorFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCreateEditorFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeCreateSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeCreateSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in subscribtions of this model.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/ClientApi~clientPrototypeCreateSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeCreateSubscribtions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeCreateSubscribtions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDeleteAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeDeleteAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all accessTokens of this model.
     * @param {String} id Client id
     * @param {module:api/ClientApi~clientPrototypeDeleteAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDeleteAccessTokens = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDeleteAccessTokens");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDeleteEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeDeleteEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all editorFeeds of this model.
     * @param {String} id Client id
     * @param {module:api/ClientApi~clientPrototypeDeleteEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDeleteEditorFeeds = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDeleteEditorFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDeleteSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeDeleteSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all subscribtions of this model.
     * @param {String} id Client id
     * @param {module:api/ClientApi~clientPrototypeDeleteSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDeleteSubscribtions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDeleteSubscribtions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDestroyByIdAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeDestroyByIdAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for accessTokens.
     * @param {String} id Client id
     * @param {String} fk Foreign key for accessTokens
     * @param {module:api/ClientApi~clientPrototypeDestroyByIdAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDestroyByIdAccessTokens = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDestroyByIdAccessTokens");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeDestroyByIdAccessTokens");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDestroyByIdEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeDestroyByIdEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for editorFeeds.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {module:api/ClientApi~clientPrototypeDestroyByIdEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDestroyByIdEditorFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDestroyByIdEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeDestroyByIdEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeDestroyByIdSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeDestroyByIdSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for subscribtions.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {module:api/ClientApi~clientPrototypeDestroyByIdSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeDestroyByIdSubscribtions = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeDestroyByIdSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeDestroyByIdSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeExistsEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeExistsEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the existence of editorFeeds relation to an item by id.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {module:api/ClientApi~clientPrototypeExistsEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.clientPrototypeExistsEditorFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeExistsEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeExistsEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/rel/{fk}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeExistsSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeExistsSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the existence of subscribtions relation to an item by id.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {module:api/ClientApi~clientPrototypeExistsSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.clientPrototypeExistsSubscribtions = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeExistsSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeExistsSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/rel/{fk}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeFindByIdAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeFindByIdAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for accessTokens.
     * @param {String} id Client id
     * @param {String} fk Foreign key for accessTokens
     * @param {module:api/ClientApi~clientPrototypeFindByIdAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.clientPrototypeFindByIdAccessTokens = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeFindByIdAccessTokens");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeFindByIdAccessTokens");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeFindByIdEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeFindByIdEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for editorFeeds.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {module:api/ClientApi~clientPrototypeFindByIdEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeFindByIdEditorFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeFindByIdEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeFindByIdEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeFindByIdSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeFindByIdSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for subscribtions.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {module:api/ClientApi~clientPrototypeFindByIdSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeFindByIdSubscribtions = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeFindByIdSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeFindByIdSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeGetAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeGetAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries accessTokens of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/ClientApi~clientPrototypeGetAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    this.clientPrototypeGetAccessTokens = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeGetAccessTokens");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [AccessToken];

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeGetEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeGetEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries editorFeeds of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/ClientApi~clientPrototypeGetEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    this.clientPrototypeGetEditorFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeGetEditorFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Feed];

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeGetSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeGetSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries subscribtions of Client.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/ClientApi~clientPrototypeGetSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    this.clientPrototypeGetSubscribtions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeGetSubscribtions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Feed];

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeLinkEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeLinkEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a related item by id for editorFeeds.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {Object} opts Optional parameters
     * @param {module:model/EditorRole} opts.data 
     * @param {module:api/ClientApi~clientPrototypeLinkEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorRole}
     */
    this.clientPrototypeLinkEditorFeeds = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeLinkEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeLinkEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = EditorRole;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/rel/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeLinkSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeLinkSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscribtion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a related item by id for subscribtions.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {Object} opts Optional parameters
     * @param {module:model/Subscribtion} opts.data 
     * @param {module:api/ClientApi~clientPrototypeLinkSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscribtion}
     */
    this.clientPrototypeLinkSubscribtions = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeLinkSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeLinkSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Subscribtion;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/rel/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypePatchAttributes operation.
     * @callback module:api/ClientApi~clientPrototypePatchAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @param {String} id Client id
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data An object of model property name/value pairs
     * @param {module:api/ClientApi~clientPrototypePatchAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientPrototypePatchAttributes = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypePatchAttributes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeUnlinkEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeUnlinkEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the editorFeeds relation to an item by id.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {module:api/ClientApi~clientPrototypeUnlinkEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeUnlinkEditorFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeUnlinkEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeUnlinkEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/rel/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeUnlinkSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeUnlinkSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the subscribtions relation to an item by id.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {module:api/ClientApi~clientPrototypeUnlinkSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeUnlinkSubscribtions = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeUnlinkSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeUnlinkSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/rel/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeUpdateByIdAccessTokens operation.
     * @callback module:api/ClientApi~clientPrototypeUpdateByIdAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for accessTokens.
     * @param {String} id Client id
     * @param {String} fk Foreign key for accessTokens
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessToken} opts.data 
     * @param {module:api/ClientApi~clientPrototypeUpdateByIdAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.clientPrototypeUpdateByIdAccessTokens = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeUpdateByIdAccessTokens");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeUpdateByIdAccessTokens");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/Clients/{id}/accessTokens/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeUpdateByIdEditorFeeds operation.
     * @callback module:api/ClientApi~clientPrototypeUpdateByIdEditorFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for editorFeeds.
     * @param {String} id Client id
     * @param {String} fk Foreign key for editorFeeds
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/ClientApi~clientPrototypeUpdateByIdEditorFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeUpdateByIdEditorFeeds = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeUpdateByIdEditorFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeUpdateByIdEditorFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/editorFeeds/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeUpdateByIdSubscribtions operation.
     * @callback module:api/ClientApi~clientPrototypeUpdateByIdSubscribtionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for subscribtions.
     * @param {String} id Client id
     * @param {String} fk Foreign key for subscribtions
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/ClientApi~clientPrototypeUpdateByIdSubscribtionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.clientPrototypeUpdateByIdSubscribtions = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeUpdateByIdSubscribtions");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling clientPrototypeUpdateByIdSubscribtions");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Clients/{id}/subscribtions/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPrototypeVerify operation.
     * @callback module:api/ClientApi~clientPrototypeVerifyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger user&#39;s identity verification with configured verifyOptions
     * @param {String} id Client id
     * @param {module:api/ClientApi~clientPrototypeVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientPrototypeVerify = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientPrototypeVerify");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/{id}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientReplaceByIdPostClientsidReplace operation.
     * @callback module:api/ClientApi~clientReplaceByIdPostClientsidReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientReplaceByIdPostClientsidReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientReplaceByIdPostClientsidReplace = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientReplaceByIdPostClientsidReplace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/{id}/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientReplaceByIdPutClientsid operation.
     * @callback module:api/ClientApi~clientReplaceByIdPutClientsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientReplaceByIdPutClientsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientReplaceByIdPutClientsid = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clientReplaceByIdPutClientsid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientReplaceOrCreatePostClientsReplaceOrCreate operation.
     * @callback module:api/ClientApi~clientReplaceOrCreatePostClientsReplaceOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientReplaceOrCreatePostClientsReplaceOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientReplaceOrCreatePostClientsReplaceOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/replaceOrCreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientReplaceOrCreatePutClients operation.
     * @callback module:api/ClientApi~clientReplaceOrCreatePutClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Client} opts.data Model instance data
     * @param {module:api/ClientApi~clientReplaceOrCreatePutClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientReplaceOrCreatePutClients = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientResetPassword operation.
     * @callback module:api/ClientApi~clientResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password for a user with email.
     * @param {Object} options 
     * @param {module:api/ClientApi~clientResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientResetPassword = function(options, callback) {
      var postBody = options;

      // verify the required parameter 'options' is set
      if (options === undefined || options === null) {
        throw new Error("Missing the required parameter 'options' when calling clientResetPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientSetPassword operation.
     * @callback module:api/ClientApi~clientSetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset user&#39;s password via a password-reset token.
     * @param {String} newPassword 
     * @param {module:api/ClientApi~clientSetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clientSetPassword = function(newPassword, callback) {
      var postBody = null;

      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling clientSetPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'newPassword': newPassword
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Clients/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUpdateAll operation.
     * @callback module:api/ClientApi~clientUpdateAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Client} opts.data An object of model property name/value pairs
     * @param {module:api/ClientApi~clientUpdateAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.clientUpdateAll = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/Clients/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUpsertWithWhere operation.
     * @callback module:api/ClientApi~clientUpsertWithWhereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Client} opts.data An object of model property name/value pairs
     * @param {module:api/ClientApi~clientUpsertWithWhereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    this.clientUpsertWithWhere = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Client;

      return this.apiClient.callApi(
        '/Clients/upsertWithWhere', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
