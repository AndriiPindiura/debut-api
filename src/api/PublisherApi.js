/**
 * backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Feed', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/Publisher'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Feed'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/Publisher'));
  } else {
    // Browser globals (root is window)
    if (!root.Backend) {
      root.Backend = {};
    }
    root.Backend.PublisherApi = factory(root.Backend.ApiClient, root.Backend.Feed, root.Backend.InlineResponse200, root.Backend.InlineResponse2001, root.Backend.InlineResponse2002, root.Backend.Publisher);
  }
}(this, function(ApiClient, Feed, InlineResponse200, InlineResponse2001, InlineResponse2002, Publisher) {
  'use strict';

  /**
   * Publisher service.
   * @module api/PublisherApi
   * @version 0.1.0
   */

  /**
   * Constructs a new PublisherApi. 
   * @alias module:api/PublisherApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the publisherCount operation.
     * @callback module:api/PublisherApi~publisherCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count instances of the model matched by where from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/PublisherApi~publisherCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.publisherCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Publishers/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherCreate operation.
     * @callback module:api/PublisherApi~publisherCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance of the model and persist it into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherCreateChangeStreamGetPublishersChangeStream operation.
     * @callback module:api/PublisherApi~publisherCreateChangeStreamGetPublishersChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/PublisherApi~publisherCreateChangeStreamGetPublishersChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.publisherCreateChangeStreamGetPublishersChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'options': opts['options']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Publishers/change-stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherCreateChangeStreamPostPublishersChangeStream operation.
     * @callback module:api/PublisherApi~publisherCreateChangeStreamPostPublishersChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/PublisherApi~publisherCreateChangeStreamPostPublishersChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.publisherCreateChangeStreamPostPublishersChangeStream = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'options': opts['options']
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Publishers/change-stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherDeleteById operation.
     * @callback module:api/PublisherApi~publisherDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {module:api/PublisherApi~publisherDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.publisherDeleteById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherDeleteById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Publishers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherExistsGetPublishersidExists operation.
     * @callback module:api/PublisherApi~publisherExistsGetPublishersidExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/PublisherApi~publisherExistsGetPublishersidExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.publisherExistsGetPublishersidExists = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherExistsGetPublishersidExists");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Publishers/{id}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherExistsHeadPublishersid operation.
     * @callback module:api/PublisherApi~publisherExistsHeadPublishersidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/PublisherApi~publisherExistsHeadPublishersidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.publisherExistsHeadPublishersid = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherExistsHeadPublishersid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/Publishers/{id}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherFind operation.
     * @callback module:api/PublisherApi~publisherFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Publisher>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all instances of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/PublisherApi~publisherFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Publisher>}
     */
    this.publisherFind = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Publisher];

      return this.apiClient.callApi(
        '/Publishers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherFindById operation.
     * @callback module:api/PublisherApi~publisherFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/PublisherApi~publisherFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherFindById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherFindById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherFindOne operation.
     * @callback module:api/PublisherApi~publisherFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first instance of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/PublisherApi~publisherFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherFindOne = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/findOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPatchOrCreate operation.
     * @callback module:api/PublisherApi~publisherPatchOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherPatchOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherPatchOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeCountFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeCountFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts feeds of Publisher.
     * @param {String} id Publisher id
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/PublisherApi~publisherPrototypeCountFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.publisherPrototypeCountFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeCountFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeCreateFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeCreateFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new instance in feeds of this model.
     * @param {String} id Publisher id
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/PublisherApi~publisherPrototypeCreateFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.publisherPrototypeCreateFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeCreateFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeDeleteFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeDeleteFeedsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all feeds of this model.
     * @param {String} id Publisher id
     * @param {module:api/PublisherApi~publisherPrototypeDeleteFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.publisherPrototypeDeleteFeeds = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeDeleteFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeDestroyByIdFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeDestroyByIdFeedsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related item by id for feeds.
     * @param {String} id Publisher id
     * @param {String} fk Foreign key for feeds
     * @param {module:api/PublisherApi~publisherPrototypeDestroyByIdFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.publisherPrototypeDestroyByIdFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeDestroyByIdFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling publisherPrototypeDestroyByIdFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds/{fk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeFindByIdFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeFindByIdFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a related item by id for feeds.
     * @param {String} id Publisher id
     * @param {String} fk Foreign key for feeds
     * @param {module:api/PublisherApi~publisherPrototypeFindByIdFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.publisherPrototypeFindByIdFeeds = function(id, fk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeFindByIdFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling publisherPrototypeFindByIdFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds/{fk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeGetFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeGetFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries feeds of Publisher.
     * @param {String} id Publisher id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/PublisherApi~publisherPrototypeGetFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    this.publisherPrototypeGetFeeds = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeGetFeeds");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Feed];

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypePatchAttributes operation.
     * @callback module:api/PublisherApi~publisherPrototypePatchAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @param {String} id Publisher id
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data An object of model property name/value pairs
     * @param {module:api/PublisherApi~publisherPrototypePatchAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherPrototypePatchAttributes = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypePatchAttributes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherPrototypeUpdateByIdFeeds operation.
     * @callback module:api/PublisherApi~publisherPrototypeUpdateByIdFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a related item by id for feeds.
     * @param {String} id Publisher id
     * @param {String} fk Foreign key for feeds
     * @param {Object} opts Optional parameters
     * @param {module:model/Feed} opts.data 
     * @param {module:api/PublisherApi~publisherPrototypeUpdateByIdFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    this.publisherPrototypeUpdateByIdFeeds = function(id, fk, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherPrototypeUpdateByIdFeeds");
      }

      // verify the required parameter 'fk' is set
      if (fk === undefined || fk === null) {
        throw new Error("Missing the required parameter 'fk' when calling publisherPrototypeUpdateByIdFeeds");
      }


      var pathParams = {
        'id': id,
        'fk': fk
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Feed;

      return this.apiClient.callApi(
        '/Publishers/{id}/feeds/{fk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReplaceByIdPostPublishersidReplace operation.
     * @callback module:api/PublisherApi~publisherReplaceByIdPostPublishersidReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherReplaceByIdPostPublishersidReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherReplaceByIdPostPublishersidReplace = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherReplaceByIdPostPublishersidReplace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/{id}/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReplaceByIdPutPublishersid operation.
     * @callback module:api/PublisherApi~publisherReplaceByIdPutPublishersidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherReplaceByIdPutPublishersidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherReplaceByIdPutPublishersid = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publisherReplaceByIdPutPublishersid");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReplaceOrCreatePostPublishersReplaceOrCreate operation.
     * @callback module:api/PublisherApi~publisherReplaceOrCreatePostPublishersReplaceOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherReplaceOrCreatePostPublishersReplaceOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherReplaceOrCreatePostPublishersReplaceOrCreate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/replaceOrCreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReplaceOrCreatePutPublishers operation.
     * @callback module:api/PublisherApi~publisherReplaceOrCreatePutPublishersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/Publisher} opts.data Model instance data
     * @param {module:api/PublisherApi~publisherReplaceOrCreatePutPublishersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherReplaceOrCreatePutPublishers = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherUpdateAll operation.
     * @callback module:api/PublisherApi~publisherUpdateAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Publisher} opts.data An object of model property name/value pairs
     * @param {module:api/PublisherApi~publisherUpdateAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.publisherUpdateAll = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/Publishers/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherUpsertWithWhere operation.
     * @callback module:api/PublisherApi~publisherUpsertWithWhereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Publisher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/Publisher} opts.data An object of model property name/value pairs
     * @param {module:api/PublisherApi~publisherUpsertWithWhereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Publisher}
     */
    this.publisherUpsertWithWhere = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Publisher;

      return this.apiClient.callApi(
        '/Publishers/upsertWithWhere', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
